#!/bin/sh
#
# Set up environment variables for general build tool to operate
#
export ZOPEN_TYPE="TARBALL"

export ZOPEN_GIT_URL="https://github.com/git/git"
export ZOPEN_GIT_DEPS="curl git make m4 perl autoconf automake help2man makeinfo xz zlib openssl expat gettext coreutils diffutils bash"

export ZOPEN_TARBALL_URL="https://www.kernel.org/pub/software/scm/git/git-2.38.1.tar.xz"
export ZOPEN_TARBALL_DEPS="curl git make m4 perl autoconf automake help2man makeinfo xz zlib openssl expat gettext gzip tar coreutils zoslib diffutils ncurses bash"

export ZOPEN_BOOTSTRAP="make"
export ZOPEN_BOOTSTRAP_OPTS="configure"

export ZOPEN_CHECK_OPTS='test'

export ZOPEN_EXTRA_CONFIGURE_OPTS="--with-zlib=\${ZLIB_HOME} --with-curl=\${CURL_HOME} --with-openssl=\${OPENSSL_HOME}"

export ZOPEN_EXTRA_CPPFLAGS="-I\${OPENSSL_HOME}/include -I\${GETTEXT_HOME}/include -I\${ZLIB_HOME}/include -I\${NCURSES_HOME}/include -I\${ZOPEN_ROOT}/patches/include -I\${CURL_HOME}/include -I\${EXPAT_HOME}/include"
export ZOPEN_EXTRA_LDFLAGS="-L\${GETTEXT_HOME}/lib -L\${OPENSSL_HOME}/lib -L\${ZLIB_HOME}/lib -L\${NCURSES_HOME}/lib -L\${CURL_HOME}/lib -L\${EXPAT_HOME}/lib"
export ZOPEN_EXTRA_LIBS="$ZOPEN_EXTRA_LIBS -lssl -lcrypto -lz -lcurl"

rm -f patches
if [ "${ZOPEN_TYPE}" = "TARBALL" ]; then
  ln -s tarballpatches patches
  export ZOPEN_NAME="git-2.38.1"
  rm -f v2.38.1
  ln -s ${ZOPEN_NAME} v2.38.1
else
  ln -s gitpatches patches
fi 

# Run an 'zopen_pre_check' routine to clean out any GIT environment variables 
# that might interfere with a new GIT operation during the test run
#
zopen_pre_check()
{
  unset GIT_EXEC_PATH
  unset GIT_HOME
  unset GIT_MAN_PATH
  unset GIT_PAGER
  unset GIT_ROOT
  unset GIT_SHELL
  unset GIT_SSL_CAINFO
  unset GIT_TEMPLATE_DIR
}

zopen_check_results()
{
  chk="$1/$2_check.log"
  successes=$(egrep "^ok [0-9]" "${chk}" | wc -l | xargs)
  failures=$(egrep "^not ok [0-9]" "${chk}" | wc -l | xargs)
  totalTests=$((failures+successes))

cat <<ZZ
actualFailures:$failures
totalTests:$totalTests
expectedFailures:3
ZZ
}

zopen_append_to_env() {
cat <<EOF
unset GIT_EXEC_PATH
unset GIT_MAN_PATH
unset GIT_ROOT
unset GIT_SHELL
export GIT_TEMPLATE_DIR="\$PWD/share/git-core/templates"
EOF
}
